package interviewBit;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Iterator;
import java.util.Set;

/**
 * 
 * Given a string, find if there is any sub-sequence that repeats itself.
A sub-sequence of a string is defined as a sequence of characters generated by deleting some characters in the string without changing the order of the remaining characters.

Input: 
string

Output:

0/1
0 -> No
1 -> Yes 
Example:

abab ------> yes, ab is repeated. So, return 1. 
abba ------> No, a and b follow different order. So, return 0. 
NOTE : sub-sequence length should be greater than or equal to 2

 * @author mrincodi
 * 2016-10-20
 * Comment: Grr... Lousy description gives one hour wasted (spent!) on solving the wrong problem.
 * For a right description go here:
 * http://www.geeksforgeeks.org/repeated-subsequence-length-2/
 *
 */
public class RepeatingSubSequenceWrong {
		public int anytwo(String a) {
		    if ( a. length () < 4 ) return 0;
		    int result = 0;
		    
		    HashMap <Character, ArrayList <Integer>> pos = new HashMap <Character, ArrayList <Integer>> ();

		    for ( int i = 0; i < a.length(); i++ ){
	            char c = a.charAt (i);
		        if ( pos.containsKey (c) ){
		            pos.get(c).add(i);
		        }
		        else
		            pos.put(c,new ArrayList<Integer>(Arrays.asList(i)));
		    }

	        //Dismiss the characters that are only once.
	        Set <Character> keySet = new HashSet <Character> (pos.keySet ());
	        Iterator <Character> iter = keySet.iterator();
	        
	        while (iter.hasNext()){
	            char c = iter.next();
	            
	            if ( pos.get(c).size() == 1) pos.remove(c);
	        }

	        //Now, start looking.
	        iter = pos.keySet ().iterator();
	        
	        while ( iter.hasNext() ){
	            //Get all the pair of positions of this character.
	            char c = iter.next();
	            ArrayList <Integer> posForChar = pos.get(c);
	            //Get all the first positions for char c.
	            for ( int i = 0; i < posForChar.size()-1;i++){
	                int firstPos = posForChar.get(i);
	                
	                //Get all the second positions for char c
	                inner:
	                for (int j = i+1; j < posForChar.size();j++){
	                    int secondPos = posForChar.get(j);
	                    if (secondPos - firstPos == 1 )continue inner;
	                    
	                    // Now, look in all the other list of positions for a character
	                    // between firstPos and secondPos, and the same character after
	                    // secondPos.
	                    Iterator iter2 =pos.keySet ().iterator();
	                    while ( iter.hasNext() ){
	                        char c2 = iter.next();
	                        ArrayList <Integer> posForChar2 = pos.get(c2);
	                        //Look for c2 between firstPos and secondPos.
	                        boolean foundBetweenFirstAndSecond=false;
	                        boolean foundAfterSecond=false;
	                        
	                        for ( int k = 0; k < posForChar2.size() - 1 && !foundAfterSecond && !foundBetweenFirstAndSecond; k++ ){
	                            if ( posForChar2.get(k) > secondPos ) foundAfterSecond=true;
	                            if ( posForChar2.get(k) > firstPos )  foundBetweenFirstAndSecond = true;
	                        }
	                        if (foundBetweenFirstAndSecond && foundAfterSecond) return 1;
	                    }
	                }
	            }
	        }
	        return 0;
		}

	public static void main(String[] args) {
		// TODO Auto-generated method stub

	}

}
